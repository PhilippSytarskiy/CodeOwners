name: Require Specific Approvals Based on Code Owners

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-required-approvals:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set GH_TOKEN environment variable
      run: echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

    - name: Get changed files
      id: changed_files
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Получаем изменённые файлы и выводим их в лог
        gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt

    - name: Get Code Owners and Calculate Required Approvals
      id: get_owners
      run: |
        # Создаем пустой список владельцев кода
        > codeowners.txt

        # Для каждого изменённого файла проверяем его владельцев из CODEOWNERS
        while IFS= read -r file; do
          echo "Checking owners for $file"  # Лог для каждого файла
          owners=$(git check-attr owner -- "$file" | cut -d':' -f3)
          echo "Owners for $file: $owners"  # Лог для вывода владельцев
          if [ -n "$owners" ]; then
            echo "$owners" >> codeowners.txt
          else
            echo "No owners found for $file"
          fi
        done < changed_files.txt

        # Убираем дубли из списка владельцев и выводим список владельцев
        sort -u codeowners.txt -o codeowners.txt
        echo "Unique code owners:"
        cat codeowners.txt

        # Подсчитываем количество необходимых апрувов
        REQUIRED_APPROVALS=$(wc -l < codeowners.txt)
        echo "Number of required approvals: $REQUIRED_APPROVALS"

        # Если владельцы найдены, сохраняем минимальное количество апрувов
        if [ "$REQUIRED_APPROVALS" -gt 0 ]; then
          echo "REQUIRED_APPROVALS=$REQUIRED_APPROVALS" >> $GITHUB_ENV
        else
          echo "No code owners found, skipping approvals check."
          exit 0
        fi

    - name: Get PR reviews
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Используем API для получения данных о ревью и выводим их
        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
          --jq '.[] | select(.state == "APPROVED") | .user.login' > approved_reviewers.json
        echo "Approved reviewers:"
        cat approved_reviewers.json

    - name: Check mandatory approvals
      run: |
        # Инициализация счетчика апрувов
        APPROVALS_COUNT=0

        # Проверяем апрув для каждого владельца кода
        while IFS= read -r owner; do
          if jq -e ". | index(\"${owner}\")" approved_reviewers.json > /dev/null; then
            echo "${owner} has approved the PR."
            APPROVALS_COUNT=$((APPROVALS_COUNT + 1))
          else
            echo "${owner} has NOT approved the PR."
          fi
        done < codeowners.txt

        # Выводим количество апрувов и проверяем достаточно ли их
        echo "Approvals count: $APPROVALS_COUNT out of $REQUIRED_APPROVALS required."
        if [ "$APPROVALS_COUNT" -lt "$REQUIRED_APPROVALS" ]; then
          echo "Not enough approvals from code owners. Required: $REQUIRED_APPROVALS, but got: $APPROVALS_COUNT."
          exit 1
        else
          echo "Sufficient approvals from code owners: $APPROVALS_COUNT out of $REQUIRED_APPROVALS required."
        fi
