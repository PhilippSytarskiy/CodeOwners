name: Check Required Approvals

on:
  # Объединяем оба события в один job
  # pull_request:
  #   types: [opened, synchronize, reopened, review_requested, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  check-required-approvals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Fetch changed files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching changed files from the pull request..."
          gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Fetch approval rules
        run: |
          echo "Fetching approval rules..."
          cat .github/approval_rules.json

      - name: Fetch approved reviews from GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching approved reviewers from GitHub API..."
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
            --jq '.[] | select(.state == "APPROVED") | .user.login' > approved_reviewers.txt || echo "" > approved_reviewers.txt

          echo "Approved reviewers list:"
          cat approved_reviewers.txt

      - name: Check if all required owners approved
        run: |
          echo "Checking if all required owners approved changes..."
          paths=$(jq -r 'keys[]' .github/approval_rules.json)
          approved_reviewers=$(cat approved_reviewers.txt)
          all_required_approved=true
          files_with_no_rules=true

          # Проходим по каждому измененному файлу
          while IFS= read -r file; do
            echo "Checking owners for file: $file"
            clean_file="${file#/}"
            best_match=""
            best_match_length=0

            # Ищем правило, которое подходит для этого файла
            for path in $paths; do
              clean_path="${path#/}"
              if [[ "$clean_file" == "$clean_path"* ]]; then
                path_length=${#clean_path}
                if [[ $path_length -gt $best_match_length ]]; then
                  best_match="$path"
                  best_match_length=$path_length
                fi
              fi
            done

            if [[ -n "$best_match" ]]; then
              # Получаем владельцев, которые должны одобрить изменения для данного пути
              owners=$(jq -r --arg path "$best_match" '.[$path][]' .github/approval_rules.json)
              echo "Required owners for $file: $owners"

              # Проверяем, что каждый из этих владельцев дал одобрение
              for owner in $owners; do
                if ! echo "$approved_reviewers" | grep -q "$owner"; then
                  echo "Error: Required owner $owner has not approved changes for $file."
                  all_required_approved=false
                else
                  echo "Owner $owner has approved changes for $file."
                fi
              done
            else
              # Если нет соответствующего правила для файла, пропускаем его
              echo "No matching rule found for $file. Skipping approval check."
              files_with_no_rules=false
            fi
          done < changed_files.txt

          # Если все владельцы одобрили или директории не требуют одобрения, продолжаем
          if [ "$all_required_approved" = false ]; then
            echo "Not all required owners have approved the changes."
            exit 1
          elif [ "$files_with_no_rules" = false ]; then
            echo "Some files have no matching approval rules. Skipping approval for those."
            exit 0
          else
            echo "All required owners have approved the changes."
          fi
