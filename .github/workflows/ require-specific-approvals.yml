name: Check Required Approvals

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-required-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Fetch changed files
        run: |
          echo "Fetching changed files from the pull request..."
          gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Fetch approval rules
        run: |
          echo "Fetching approval rules..."
          cat .github/approval_rules.json

      - name: Fetch approved reviews from GitHub API
        run: |
          echo "Fetching approved reviewers from GitHub API..."
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
            --jq '.[] | select(.state == "APPROVED") | .user.login' > approved_reviewers.txt
          
          echo "Approved reviewers list:"
          cat approved_reviewers.txt

      - name: Check if approved reviewers match the required owners
        run: |
          # Извлекаем все пути из approval_rules.json и проверяем на совпадение с изменёнными файлами
          echo "Checking if approved reviewers match the required owners..."
          paths=$(jq -r 'keys[]' .github/approval_rules.json)
          approved_reviewers=$(cat approved_reviewers.txt)
          all_required_approved=true

          while IFS= read -r file; do
            echo "Checking owners for file: $file"
            owner_found=false
            clean_file="${file#/}"
            best_match=""
            best_match_length=0

            for path in $paths; do
              clean_path="${path#/}"
              if [[ "$clean_file" == "$clean_path"* ]]; then
                path_length=${#clean_path}
                if [[ $path_length -gt $best_match_length ]]; then
                  best_match="$path"
                  best_match_length=$path_length
                fi
              fi
            done

            if [[ -n "$best_match" ]]; then
              owners=$(jq -r --arg path "$best_match" '.[$path][]' .github/approval_rules.json)
              echo "Required owners for $file: $owners"
              
              # Проверяем, что хотя бы один из required owners одобрил изменения
              owner_approved=false
              for owner in $owners; do
                if echo "$approved_reviewers" | grep -q "$owner"; then
                  owner_approved=true
                  break
                fi
              done

              if [ "$owner_approved" = false ]; then
                echo "Error: No required owner approved changes for $file."
                all_required_approved=false
              else
                echo "Required owner found for $file."
              fi
            else
              echo "No matching rule found for $file."
            fi
          done < changed_files.txt

          # Если хотя бы для одного файла не нашлось соответствующего владельца, прерываем работу
          if [ "$all_required_approved" = false ]; then
            echo "Not all required owners have approved the changes."
            exit 1
          else
            echo "All required owners have approved the changes."
          fi
