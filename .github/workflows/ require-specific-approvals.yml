name: Check Required Approvals

on:
  pull_request_review:
    types: [submitted]

jobs:
  check-required-approvals:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Fetch changed files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching changed files from the pull request..."
          gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Fetch approval rules
        run: |
          echo "Fetching approval rules..."
          cat .github/approval_rules.json

      - name: Fetch approved reviews from GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching approved reviewers from GitHub API..."
          gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
            --jq '.[] | select(.state == "APPROVED") | .user.login' | sort -u > approved_reviewers.txt || echo "" > approved_reviewers.txt

          echo "Approved reviewers list:"
          cat approved_reviewers.txt

      - name: Check if all required owners approved
        run: |
          echo "Checking if all required owners approved changes..."
          # Читаем изменённые файлы в массив
          mapfile -t changed_files < changed_files.txt

          # Загружаем правила одобрения
          approval_rules=$(cat .github/approval_rules.json)
          paths=$(jq -r 'keys[]' .github/approval_rules.json)
          approved_reviewers=$(cat approved_reviewers.txt)
          all_required_approved=true
          required_owners=()

          # Проходим по каждому правилу
          for path in $paths; do
            clean_path="${path#/}"
            owners=$(jq -r --arg path "$path" '.[$path][]' .github/approval_rules.json)
            echo "Processing rule for path '$path' with owners: $owners"

            # Находим файлы, соответствующие этому правилу
            matched_files=()
            for file in "${changed_files[@]}"; do
              clean_file="${file#/}"
              if [[ "$clean_file" == "$clean_path"* ]]; then
                matched_files+=("$file")
              fi
            done

            if [[ ${#matched_files[@]} -eq 0 ]]; then
              echo "No changed files match the rule for path '$path'"
            else
              echo "Files matching rule '$path': ${matched_files[@]}"
              # Добавляем владельцев в список требуемых владельцев
              required_owners+=(${owners})
            fi
          done

          # Убираем дубликаты из списка требуемых владельцев
          unique_required_owners=($(echo "${required_owners[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          echo "Total required owners for all files: ${unique_required_owners[@]}"

          # Проверяем, что каждый требуемый владелец одобрил изменения
          for owner in "${unique_required_owners[@]}"; do
            if ! echo "$approved_reviewers" | grep -qw "$owner"; then
              echo "Error: Required owner '$owner' has not approved the changes."
              all_required_approved=false
            else
              echo "Owner '$owner' has approved the changes."
            fi
          done

          # Выводим результат проверки
          if [ "$all_required_approved" = false ]; then
            echo "Not all required owners have approved the changes."
            exit 1
          else
            echo "All required owners have approved the changes."
          fi
